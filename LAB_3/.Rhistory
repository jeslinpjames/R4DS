y <- c(111,4,6,77,32,67,22,99,11,55,76,88)
#Scatter Plots
x <- c(5,7,8,7,2,2,9,4,11,12,9,6)
y <- c(111,4,6,77,32,67,22,99,11,55,76,88)
plot(x,y, main="Observation of Cars",xlab="Car age",ylab="Car Speed")
y <- c(99,86,87,88,111,103,87,94,78,77,85,86)
#Scatter Plots
x <- c(5,7,8,7,2,2,9,4,11,12,9,6)
y <- c(99,86,87,88,111,103,87,94,78,77,85,86)
plot(x,y, main="Observation of Cars",xlab="Car age",ylab="Car Speed")
plot(x,y, main="Observation of Cars",xlab="Car age",ylab="Car Speed", col="red")
plot(x,y, main="Observation of Cars",xlab="Car age",ylab="Car Speed", col="red",pch =20)
pie(x)
#Pie Charts
x <- c(25,75)
pie(x)
pie(x,init.angle = 90)
pie(x,label =mylabel,main="fruits")
#Eg3
mylabel <-c("Apples", "Bananas","cherries","Dates")
pie(x,label = mylabel,main="fruits")
x <- c(10,20,30,40)
pie(x,init.angle = 90)
#Eg3
mylabel <-c("Apples", "Bananas","cherries","Dates")
pie(x,label = mylabel,main="fruits")
pie(x,label=mylabel,main-"Fruits",col = colours )
x <- c(10,20,30,40)
pie(x,init.angle = 90)
#Eg3
mylabel <-c("Apples", "Bananas","cherries","Dates")
pie(x,label = mylabel,main="fruits")
#Eg 4
colour <- c("blue","yellow","green"."black")
#Eg 4
x <- c(10,20,30,40)
colour <- c("blue","yellow","green"."black")
colour <- c("blue","yellow","green","black")
#Eg 4
x <- c(10,20,30,40)
colour <- c("blue","yellow","green","black")
pie(x,label=mylabel,main-"Fruits",col = colours )
pie(x,label=mylabel,main="Fruits",col = colours )
pie(x,label=mylabel, main="Fruits", col = colours )
#Eg 4
x <- c(10,20,30,40)
colour <- c("blue","yellow","green","black")
pie(x,label=mylabel, main="Fruits", col = colours )
mylabel <-c("Apples", "Bananas","cherries","Dates")
pie(x,label = mylabel,main="fruits")
#Eg 4
x <- c(10,20,30,40)
colour <- c("blue","yellow","green","black")
pie(x,label=mylabel, main="Fruits", col = colours )
#Eg 4
x <- c(10,20,30,40)
#Eg3
mylabel <-c("Apples", "Bananas","cherries","Dates")
#pie(x,label = mylabel,main="fruits")
#Eg 4
x <- c(10,20,30,40)
colour <- c("blue","yellow","green","black")
pie(x,label=mylabel, main="Fruits", col = colours )
pie(x,label = mylabel,main="fruits")
#Eg 4
x <- c(10,20,30,40)
colour <- c("blue","yellow","green","black")
pie(x, label=mylabel, main="Fruits", col = colour )
legend("bottomright",label=mylabel, colour=colour)
legend("bottomright",legend=mylabel, fill=colour)
# Define the piecewise function
f <- function(x) {
ifelse(x < 3, x^2, 2 * x + 4)
}
# Create a sequence of x values for plotting
x <- seq(0, 10, length.out = 100)
# Compute the corresponding y values
y <- f(x)
# Plot the piecewise function
plot(x, y, type = "l", col = "blue", lwd = 2,
main = "Piecewise Function", xlab = "x", ylab = "f(x)")
# Add points to highlight the change in the function at x = 3
points(x, y, pch = 16, col = "blue")
# Define the function using ifelse
f <- function(x) {
ifelse(x < 3, x^2, 2*x + 4)
}
# Define the x range for plotting
x <- seq(0, 5, by = 0.1)
# Plot the function
plot(x, f(x), type = "l", col = "blue", lwd = 2,
ylab = "f(x)", xlab = "x",
main = "Piecewise Function Plot")
# Define the function using ifelse
f <- function(x) {
ifelse(x < 3, x^2, 2*x + 4)
}
# Define the x range for plotting, including negative values
x <- seq(-5, 5, by = 0.1)
# Plot the function
plot(x, f(x), type = "l", col = "blue", lwd = 2,
ylab = "f(x)", xlab = "x",
main = "Piecewise Function Plot")
# Add a grid for better visibility
grid()
barplot(y,names.arg = x, col ="blue")
#Bar Charts
x <- c("A","B","C","D")
y <- c(2,4,6,8)
barplot(y,names.arg = x, col ="blue")
barplot(y,names.arg = x, col =colour)
barplot(y,names.arg = x, col = colour, horiz=TRUE)
hist(v,xlab="Weight",col =colour,border ="blue")
#Hist
v <- c(9,13,21,8,36,22,12,41,31,33,19)
hist(v,xlab="Weight",col =colour,border ="blue")
hist(v,xlab="Weight",col ="red",border ="blue")
hist(v,xlab="Weight",col ="green",border ="red",xlim=c(0,40),ylim=c(c,50),breaks=5)
hist(v,xlab="Weight",col ="green",border = "red",xlim = c(0,40), ylim = c(c,50),breaks=5)
hist(v,xlab="Weight",col ="green",border = "red", xlim = c(0,40), ylim = c(c,50),breaks = 5)
boxplot(mpg ~ cyl,data=mtcars,xlab="Number of Cylinders",main ="Milage Data")
is.na(x)
x <- c(NA,3,4,NA, NA,NA)
x <- c(NA,3,4,NA, NA,NA)
is.na(x)
na.omit()
na.omit(x)
na.omit(x)
na.exclude(x)
data <- data.frame(
marks1 = c(NA,81,78.500),
marks2 = c(81,14,NA,61,12),
marks3 = c(78.5,19.325,NA,28,48.002)
)
data <- data.frame(
marks1 = c(NA,81,49,78.500),
marks2 = c(81,14,NA,61,12),
marks3 = c(78.5,19.325,NA,28,48.002)
)
data <- data.frame(
marks1 = c(NA,22,NA,49,75),
marks2 = c(81,14,NA,61,12),
marks3 = c(78.5,19.325,NA,28,48.002)
)
data
summary(data)
mean(x,trim=0,na.rm=TRUE)
source("D:/git/R4DS/LabExperiments/missingValues.R", echo=TRUE)
data
data$marks1[is.na(data$marks1)] <- mean(data$marks1,na.rm = TRUE)
data$marks2[is.na(data$marks2)] <- mean(data$marks2,na.rm = TRUE)
data$marks3[is.na(data$marks3)] <- mean(data$marks3,na.rm = TRUE)
data
install.packages("Hmist")
library("Hmist")
impute(data$marks2,median)
impute(data$marks2,median)
library(Hmist)
install.packages("Hmisc")
library(Hmisc)
impute(data$marks2,median)
data <- rnorm(500)
data[1:10] <- c(46,9,15,-90,
42,50,-82,74,61,-32)
data <- rnorm(500)
data[1:10] <- c(46,9,15,-90,
42,50,-82,74,61,-32)
boxplot(data)
# Open a PNG device to save the plot
png("scatterplot_sepal_petal_length.png", width = 1920, height = 1080, res = 300)
# Create the scatterplot
plot(iris$Sepal.Length, iris$Petal.Length,
xlab = "Sepal Length (cm)",
ylab = "Petal Length (cm)",
main = "Scatterplot of Sepal Length vs Petal Length in Iris Dataset",
col = "blue",
pch = 19)  # pch changes the point type
# Close the device
dev.off()
getwd()
# Change the working directory
setwd("D:/git/R4DS")
# Load the mtcars dataset (it's built-in)
data(mtcars)
# Open a PNG device to save the plot (optional if you want to save)
png("scatterplot_mpg_disp.png", width = 1920, height = 1080, res = 300)
# Create scatterplot with color coding for cyl
plot(mtcars$disp, mtcars$mpg,
col = as.factor(mtcars$cyl),
xlab = "Displacement (cu.in.)",
ylab = "Miles Per Gallon (mpg)",
main = "Scatterplot of MPG vs Displacement with Cylinders Colored",
pch = 19)
# Add a smooth trend line
lines(loess.smooth(mtcars$disp, mtcars$mpg), col = "black", lwd = 2)
# Add a legend
legend("topright", legend = unique(mtcars$cyl),
col = as.factor(unique(mtcars$cyl)),
pch = 19, title = "Cylinders")
# Close the device (if saving to a file)
dev.off()# Load the mtcars dataset (it's built-in)
data(mtcars)
# Open a PNG device to save the plot (optional if you want to save)
png("scatterplot_mpg_disp.png", width = 1920, height = 1080, res = 300)
# Create scatterplot with color coding for cyl
plot(mtcars$disp, mtcars$mpg,
col = as.factor(mtcars$cyl),
xlab = "Displacement (cu.in.)",
ylab = "Miles Per Gallon (mpg)",
main = "Scatterplot of MPG vs Displacement with Cylinders Colored",
pch = 19)
# Add a smooth trend line
lines(loess.smooth(mtcars$disp, mtcars$mpg), col = "black", lwd = 2)
# Add a legend
legend("topright", legend = unique(mtcars$cyl),
col = as.factor(unique(mtcars$cyl)),
pch = 19, title = "Cylinders")
# Close the device (if saving to a file)
dev.off()
getwd()
# Change the working directory
setwd("D:/git/R4DS/LAB_2")
cls
# Load the mtcars dataset (it's built-in)
data(mtcars)
# Open a PNG device to save the plot (optional)
png("barplot_cyl_am.png", width = 1920, height = 1080, res = 300)
# Create a table of counts for cylinders and transmission
cyl_am_table <- table(mtcars$cyl, mtcars$am)
# Create the bar plot
barplot(cyl_am_table, beside = TRUE,
col = c("skyblue", "orange", "green"),
legend = rownames(cyl_am_table),
xlab = "Transmission Type (0 = Automatic, 1 = Manual)",
ylab = "Number of Cars",
main = "Bar Plot of Cylinder Counts by Transmission Type")
# Add a legend for transmission type
legend("topright",
legend = c("Automatic", "Manual"),
fill = c("skyblue", "orange"))
# Close the device (if saving to a file)
dev.off()
# Load the mtcars dataset (it's built-in)
data(mtcars)
# Calculate the mean and standard deviation of mpg
mean_mpg <- mean(mtcars$mpg)
sd_mpg <- sd(mtcars$mpg)
# Open a PNG device to save the plot (optional)
png("histogram_mpg.png", width = 1920, height = 1080, res = 300)
# Create the histogram with different shades of blue
hist(mtcars$mpg,
breaks = 10, # Number of bins
col = colorRampPalette(c("lightblue", "blue"))(10),
xlab = "Miles Per Gallon (mpg)",
main = "Histogram of Miles Per Gallon in mtcars Dataset")
# Add mean and standard deviation as text on the plot
text(x = mean_mpg, y = 5,
labels = paste("Mean:", round(mean_mpg, 2)),
col = "red", cex = 1.2)
text(x = mean_mpg, y = 4,
labels = paste("SD:", round(sd_mpg, 2)),
col = "red", cex = 1.2)
# Add a vertical line for the mean
abline(v = mean_mpg, col = "red", lwd = 2, lty = 2)
# Close the device (if saving to a file)
dev.off()
# Load the mtcars dataset (it's built-in)
data(mtcars)
# Open a PNG device to save the plot (optional)
png("boxplot_hp_gears.png", width = 1920, height = 1080, res = 300)
# Create the box plot of horsepower (hp) by gears (gear)
boxplot(mtcars$hp ~ mtcars$gear,
xlab = "Number of Gears",
ylab = "Horsepower (hp)",
main = "Box Plot of Horsepower by Number of Gears",
col = c("lightgreen", "lightblue", "lightpink"),
pch = 19)  # pch specifies the symbol type for outliers
# Add a legend to differentiate between gears
legend("topright",
legend = unique(mtcars$gear),
title = "Gears",
fill = c("lightgreen", "lightblue", "lightpink"))
# Identify and label outliers
outliers <- boxplot(mtcars$hp ~ mtcars$gear, plot = FALSE)$out
outlier_indexes <- which(mtcars$hp %in% outliers)
# Label the outliers on the plot
text(x = as.numeric(mtcars$gear[outlier_indexes]),
y = mtcars$hp[outlier_indexes],
labels = rownames(mtcars)[outlier_indexes],
pos = 4, col = "red")
# Load the mtcars dataset (it's built-in)
data(mtcars)
# Open a PNG device to save the plot (optional)
png("boxplot_hp_gears.png", width = 1920, height = 1080, res = 300)
# Create the box plot of horsepower (hp) by gears (gear)
boxplot(mtcars$hp ~ mtcars$gear,
xlab = "Number of Gears",
ylab = "Horsepower (hp)",
main = "Box Plot of Horsepower by Number of Gears",
col = c("lightgreen", "lightblue", "lightpink"),
pch = 19)  # pch specifies the symbol type for outliers
# Add a legend to differentiate between gears
legend("topright",
legend = unique(mtcars$gear),
title = "Gears",
fill = c("lightgreen", "lightblue", "lightpink"))
# Identify and label outliers
outliers <- boxplot(mtcars$hp ~ mtcars$gear, plot = FALSE)$out
outlier_indexes <- which(mtcars$hp %in% outliers)
# Label the outliers on the plot
text(x = as.numeric(mtcars$gear[outlier_indexes]),
y = mtcars$hp[outlier_indexes],
labels = rownames(mtcars)[outlier_indexes],
pos = 4, col = "red")
# Load the mtcars dataset (it's built-in)
data(mtcars)
# Open a PNG device to save the plot (optional)
png("boxplot_hp_gears.png", width = 1920, height = 1080, res = 300)
# Create the box plot of horsepower (hp) by gears (gear)
boxplot(mtcars$hp ~ mtcars$gear,
xlab = "Number of Gears",
ylab = "Horsepower (hp)",
main = "Box Plot of Horsepower by Number of Gears",
col = c("lightgreen", "lightblue", "lightpink"),
pch = 19)  # pch specifies the symbol type for outliers
# Add a legend to differentiate between gears
legend("topright",
legend = unique(mtcars$gear),
title = "Gears",
fill = c("lightgreen", "lightblue", "lightpink"))
# Identify and label outliers
outliers <- boxplot(mtcars$hp ~ mtcars$gear, plot = FALSE)$out
outlier_indexes <- which(mtcars$hp %in% outliers)
# Label the outliers on the plot
text(x = as.numeric(mtcars$gear[outlier_indexes]),
y = mtcars$hp[outlier_indexes],
labels = rownames(mtcars)[outlier_indexes],
pos = 4, col = "red")
# Load the mtcars dataset (it's built-in)
data(mtcars)
# Open a PNG device to save the plot (optional)
png("boxplot_hp_gears.png", width = 1920, height = 1080, res = 300)
# Create the box plot of horsepower (hp) by gears (gear)
boxplot(mtcars$hp ~ mtcars$gear,
xlab = "Number of Gears",
ylab = "Horsepower (hp)",
main = "Box Plot of Horsepower by Number of Gears",
col = c("lightgreen", "lightblue", "lightpink"),
pch = 19)  # pch specifies the symbol type for outliers
# Add a legend to differentiate between gears
legend("topright",
legend = unique(mtcars$gear),
title = "Gears",
fill = c("lightgreen", "lightblue", "lightpink"))
# Identify and label outliers
outliers <- boxplot(mtcars$hp ~ mtcars$gear, plot = FALSE)$out
if (length(outliers) > 0) {
outlier_indexes <- which(mtcars$hp %in% outliers)
# Label the outliers on the plot
text(x = as.numeric(mtcars$gear[outlier_indexes]),
y = mtcars$hp[outlier_indexes],
labels = rownames(mtcars)[outlier_indexes],
pos = 4, col = "red")
} else {
message("No outliers found.")
}
# Close the device (if saving to a file)
dev.off()
# Load the mtcars dataset (it's built-in)
data(mtcars)
# Open a PNG device to save the plot (optional)
png("scatterplot_disp_wt_carb.png", width = 1920, height = 1080, res = 300)
# Create the scatter plot
plot(mtcars$disp, mtcars$wt,
col = as.factor(mtcars$carb), # Different colors for each carburetor count
cex = mtcars$carb * 0.7,      # Size based on number of carburetors
pch = 19,                     # Point type
xlab = "Displacement (cu.in.)",
ylab = "Weight (1000 lbs)",
main = "Scatterplot of Displacement vs Weight (Colored by Carburetors)")
# Add a smooth trend line (LOESS regression)
lines(loess.smooth(mtcars$disp, mtcars$wt), col = "black", lwd = 2)
# Add a legend for carburetors (color-coded)
legend("topright",
legend = unique(mtcars$carb),
col = as.factor(unique(mtcars$carb)),
pch = 19,
title = "Carburetors")
# Close the device (if saving to a file)
dev.off()
# Load required libraries
library(ggplot2)
library(readr)
# Install the readr and ggplot2 packages
install.packages("readr")
install.packages("ggplot2")
# Load required libraries
library(ggplot2)
library(readr)
# Read the COVID-19 time series dataset (assuming the dataset is a CSV file)
covid_data <- read_csv("time-series-19-covid-combined.csv")
# Display the first few rows to understand the structure of the dataset
head(covid_data)
# Convert the 'ObservationDate' column to Date format
covid_data$ObservationDate <- as.Date(covid_data$ObservationDate, format = "%m/%d/%Y")
# Load required libraries
library(ggplot2)
library(readr)
# Read the COVID-19 time series dataset (assuming the dataset is a CSV file)
covid_data <- read_csv("time-series-19-covid-combined.csv")
# Display the first few rows to understand the structure of the dataset
head(covid_data)
# Convert the 'Date' column to Date format (this is already in date format, so this step is not needed)
covid_data$Date <- as.Date(covid_data$Date)
# Summarize the data by date (e.g., sum up confirmed cases globally per date)
daily_summary <- aggregate(Confirmed ~ Date, data = covid_data, sum)
# Create a time series plot using ggplot2
ggplot(daily_summary, aes(x = Date, y = Confirmed)) +
geom_line(color = "blue", size = 1) +   # Line plot for time series
labs(title = "Global COVID-19 Confirmed Cases Over Time",
x = "Date",
y = "Number of Confirmed Cases") +
theme_minimal()
# If you want to save the plot as an image file
ggsave("covid_timeseries_plot.png", width = 10, height = 6, dpi = 300)
getwd()
# Load required libraries
library(ggplot2)
library(readr)
# Read the COVID-19 time series dataset (assuming the dataset is a CSV file)
covid_data <- read_csv("time-series-19-covid-combined.csv")
# Display the first few rows to understand the structure of the dataset
head(covid_data)
# Convert the 'Date' column to Date format
covid_data$Date <- as.Date(covid_data$Date)
# Summarize the data by date (e.g., sum up confirmed cases globally per date)
daily_summary <- aggregate(Confirmed ~ Date, data = covid_data, sum)
# Create a time series plot using ggplot2
ggplot(daily_summary, aes(x = Date, y = Confirmed)) +
geom_line(color = "dodgerblue", size = 1.5) +   # Line plot for time series with a thicker line
labs(title = "Global COVID-19 Confirmed Cases Over Time",
x = "Date",
y = "Number of Confirmed Cases") +
theme_minimal(base_size = 15) +  # Increase the font size for better visibility
theme(
plot.title = element_text(hjust = 0.5, color = "darkblue", size = 20, face = "bold"),  # Center the title
axis.title.x = element_text(color = "darkblue", size = 14),
axis.title.y = element_text(color = "darkblue", size = 14),
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate the x-axis labels for better readability
)
# If you want to save the plot as an image file
ggsave("covid_timeseries_plot.png", width = 10, height = 6, dpi = 300)
# Load required libraries
library(ggplot2)
library(readr)
# Read the train dataset
train_data <- read_csv("train.csv")
# Change the working directory
setwd("D:/git/R4DS/LAB_3")
# Load required libraries
library(ggplot2)
library(readr)
# Read the train dataset
train_data <- read_csv("train.csv")
# View the first few rows to understand the structure
head(train_data)
# Create a scatter plot of GrLivArea vs SalePrice colored by OverallQual
ggplot(train_data, aes(x = GrLivArea, y = SalePrice, color = as.factor(OverallQual))) +
geom_point(size = 3, alpha = 0.6) +   # Use larger points and slight transparency
labs(title = "Living Area vs Sale Price",
x = "Above Ground Living Area (sq ft)",
y = "Sale Price (USD)",
color = "Overall Quality") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold"),
axis.title = element_text(size = 14)
) +
scale_color_brewer(palette = "Set1")   # Use a color palette for clarity
# Save the plot
ggsave("GrLivArea_vs_SalePrice.png", width = 12, height = 8, dpi = 300)
# Load necessary libraries
library(ggplot2)
library(readr)
# Load the train dataset (assume it's saved as 'train.csv')
train_data <- read_csv("train.csv")
# View the first few rows to understand the structure
head(train_data)
# Fit a linear regression model with SalePrice as dependent variable and GrLivArea as the independent variable
model <- lm(SalePrice ~ GrLivArea, data = train_data)
# View the summary of the model to check the coefficients and other statistics
summary(model)
# Extract the intercept and slope (regression coefficients)
intercept <- coef(model)[1]
slope <- coef(model)[2]
# Print the slope and intercept
cat("Intercept:", intercept, "\n")
cat("Slope:", slope, "\n")
# Create scatter plot of GrLivArea vs SalePrice
ggplot(train_data, aes(x = GrLivArea, y = SalePrice)) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot of data points
geom_abline(intercept = intercept, slope = slope, color = "red", size = 1.2) +  # Regression line
labs(title = "Linear Regression: SalePrice vs GrLivArea",
x = "Above Ground Living Area (sq ft)",
y = "Sale Price (USD)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold"),
axis.title = element_text(size = 14)
)
# Save the plot (optional)
ggsave("regression_SalePrice_GrLivArea.png", width = 12, height = 8, dpi = 300)
